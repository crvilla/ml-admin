generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model User {
  id             String   @id @default(cuid())
  user_name      String   @unique
  email          String?  @unique
  phone          String?
  password       String
  changePassword Boolean  @default(true)
  roleId         String
  role           Role     @relation(fields: [roleId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum BusinessStatus {
  ACTIVE // Cliente con servicio funcionando
  PENDING // En prueba, demo o esperando activación
  INACTIVE // Ya no se usa, pero no ha sido eliminado
  BLOCKED // Suspendido manualmente por problemas
  SUSPENDED // Suspendido por impago u otro automático
}

enum ApiIntegrationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum WSEnvironment {
  DEV
  TEST
  PROD
}

model Business {
  id              String                   @id @default(cuid())
  name            String
  slug            String                   @unique
  status          BusinessStatus           @default(PENDING)
  apiKeyPrivate   String                   @unique
  webhookToken    String?
  webhookURL      String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  whatsappConfigs BusinessWhatsappConfig[] // ← relación uno-a-muchos
  apiIntegrations BusinessApiIntegration[]
  bots            BusinessBot[]
}

model BusinessApiIntegration {
  id           String                @id @default(cuid())
  businessId   String
  business     Business              @relation(fields: [businessId], references: [id])
  apiId        String
  api          ApiIntegrationCatalog @relation(fields: [apiId], references: [id], name: "ApiCatalogRelation")
  externalId   String
  publicApiKey String                @unique
  status       ApiIntegrationStatus  @default(INACTIVE)
  botId        String?
  bot          BusinessBot?          @relation(fields: [botId], references: [id])
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  // Relaciones adicionales
  subApis BusinessSubApi[] @relation("SubApisFromChat")

  @@unique([businessId, apiId])
}

model BusinessSubApi {
  id         String                 @id @default(cuid())
  apiChatId  String // La API principal, de tipo chat
  apiChat    BusinessApiIntegration @relation("SubApisFromChat", fields: [apiChatId], references: [id])
  apiId      String // El catálogo de la sub API (Leads, Appointments, etc.)
  api        ApiIntegrationCatalog  @relation(fields: [apiId], references: [id])
  externalId String // ID con el que quedó registrado en el monolito externo
  status     ApiIntegrationStatus   @default(INACTIVE)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([apiChatId, apiId]) // Evita duplicados para una subapi en una apiChat
}

model ApiIntegrationCatalog {
  id        String          @id @default(cuid())
  name      String
  baseUrl   String
  type      EnvironmentType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  apiIntegrations BusinessApiIntegration[] @relation(name: "ApiCatalogRelation")
  subApis         BusinessSubApi[]

  @@unique([name, type])
}

enum EnvironmentType {
  DEV
  PROD
}

model BusinessWhatsappConfig {
  id                    String        @id @default(cuid())
  name                  String
  businessId            String
  business              Business      @relation(fields: [businessId], references: [id])
  wabaId                String
  phoneNumberId         String
  senderPhoneNumber     String
  accessToken           String
  environment           WSEnvironment
  testDestinationNumber String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  bots                  BusinessBot[]
}

model BusinessBot {
  id               String                   @id @default(cuid())
  name             String
  description      String?
  webhookURL       String
  webhookTestURL   String?
  businessId       String
  business         Business                 @relation(fields: [businessId], references: [id])
  whatsappConfigId String
  whatsappConfig   BusinessWhatsappConfig   @relation(fields: [whatsappConfigId], references: [id])
  apiIntegrations  BusinessApiIntegration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
