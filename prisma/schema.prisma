generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

//
// -------- ENUMS --------
//

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
}

enum BusinessStatus {
  ACTIVE
  PENDING
  INACTIVE
  BLOCKED
  SUSPENDED
}

enum Sender {
  USER
  AI
}

enum SalesChatStatus {
  ACTIVE              // Cliente aún no ha mostrado interés concreto
  INTERESTED          // Cliente con interés (marca, modelo, precio)
  CLEAR_INTEREST      // Producto único identificado, IA responde con detalles
  QUALIFYING          // IA está validando intención de contacto o financiación
  QUALIFIED           // Cliente calificado, listo para gestión humana
  WAITING_DOCS        // A la espera de documentos
  WAITING_INFO        // A la espera de info adicional (ej: ciudad, nombre, etc.)
  ESCALATED           // Escalado a equipo humano (problema, queja, caso complejo)
  PAUSED_BY_INACTIVITY // Cliente dejó de responder; conversación congelada
  SHEDULER            // Agendado para seguimiento posterior
  CLOSED              // Conversación cerrada sin lead
  LEAD                // Conversación cerrada y se obtuvo un lead exitoso
  CLOSED_LEAD          // Conversación cerrada lead que vuelve a empezar
  LOST                // Conversación terminada, cliente no interesado o rechazó
}

//
// -------- LEADS --------
//

model RoleLeads {
  id        Int             @id @default(autoincrement())
  name      String          @unique
  users     BusinessUser[]  @relation("RoleUsers")
  createdAt DateTime        @default(now())
}

model BusinessUser {
  id              Int           @id @default(autoincrement())
  username        String        @unique
  password        String
  changePassword  Boolean       @default(false) // Nuevo campo
  role            RoleLeads     @relation("RoleUsers", fields: [roleId], references: [id])
  roleId          Int
  token           String?
  profile         BusinessUserProfile?
  businessLeads   BusinessLead[] @relation("UserBusinessLeads")
  createdAt       DateTime      @default(now())
}

model BusinessUserProfile {
  id         Int           @id @default(autoincrement())
  name       String
  phone      String
  photoUrl   String?
  user       BusinessUser  @relation(fields: [userId], references: [id])
  userId     Int           @unique
  createdAt  DateTime      @default(now())
}

model BusinessLead {
  id        Int             @id @default(autoincrement())
  name      String
  token     String          @unique
  leads     Lead[]
  users     BusinessUser[]  @relation("UserBusinessLeads")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Lead {
  id                     Int             @id @default(autoincrement())
  name                   String?
  fullName               String?
  email                  String?
  phone                  String
  phoneContact           String?
  documentNumber         String?
  searchTerm             String?
  leadType               String?
  requiresFinancing      Boolean         @default(false)
  willingToQualify       Boolean         @default(false)
  hasTradeInVehicle      Boolean         @default(false)
  calledClient           Boolean         @default(false)
  salesChatId            String          @unique
  productInterestSummary String?
  productPrice           String?
  tradeInVehicle         TradeInVehicle? @relation(fields: [tradeInVehicleId], references: [id])
  tradeInVehicleId       Int?            @unique
  business               BusinessLead    @relation(fields: [businessId], references: [id])
  businessId             Int
  appointments           Appointment?
  createdAt              DateTime        @default(now())
}

model TradeInVehicle {
  id        Int       @id @default(autoincrement())
  name      String?   // Ahora opcional
  brand     String?   // Ahora opcional
  model     String?   // Ahora opcional
  chassis   String?   // Ahora opcional
  year      String?   // Ya era opcional
  photos    String[]
  lead      Lead?     @relation
  createdAt DateTime  @default(now())
}

model Appointment {
  id        Int                @id @default(autoincrement())
  lead      Lead               @relation(fields: [leadId], references: [id])
  leadId    Int                @unique
  date      DateTime
  notes     String?
  status    AppointmentStatus  @default(SCHEDULED)
  createdAt DateTime           @default(now())
}

//
// -------- CHATS --------
//

model BusinessChat {
  id        Int           @id @default(autoincrement())
  token     String        @unique
  status    BusinessStatus @default(INACTIVE)
  users     User[]
  chats     SalesChat[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model User {
  id         Int           @id @default(autoincrement())
  phone      String        @unique
  name       String?
  email      String?
  businessId Int
  business   BusinessChat  @relation(fields: [businessId], references: [id])
  messages   Message[]
  salesChats SalesChat[]
}

model Message {
  id          Int        @id @default(autoincrement())
  content     String
  createdAt   DateTime   @default(now())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  salesChatId Int?
  salesChat   SalesChat? @relation(fields: [salesChatId], references: [id])
  sender      Sender     @default(USER)
}

model SalesChat {
  id                 Int              @id @default(autoincrement())
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  businessId         Int
  business           BusinessChat     @relation(fields: [businessId], references: [id])
  status             SalesChatStatus  @default(ACTIVE)
  lastStatus         SalesChatStatus?
  summary            String?
  interestedProduct  String?
  aiResponseSummary  String?
  lastInteractionAt  DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  messages           Message[]
  loopEdit           Int              @default(0)
}

//
// -------- ADMIN --------
//

model RoleAdmin {
  id    String @id @default(cuid())
  name  String @unique
  users UserAdmin[]
}

model UserAdmin {
  id             String   @id @default(cuid())
  user_name      String   @unique
  email          String?  @unique
  phone          String?
  password       String
  changePassword Boolean  @default(true)
  roleId         String
  role           RoleAdmin @relation(fields: [roleId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum ApiIntegrationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum WSEnvironment {
  DEV
  TEST
  PROD
}

model BusinessAdmin {
  id              String                   @id @default(cuid())
  name            String
  slug            String                   @unique
  status          BusinessStatus           @default(PENDING)
  apiKeyPrivate   String                   @unique
  webhookToken    String?
  webhookURL      String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  whatsappConfigs BusinessWhatsappConfig[]
  apiIntegrations BusinessApiIntegration[]
  bots            BusinessBot[]
  verticalId      String?
  vertical        Vertical? @relation(fields: [verticalId], references: [id])
  activeVariables BusinessActiveVariable[]
}

model BusinessApiIntegration {
  id           String                @id @default(cuid())
  businessId   String
  business     BusinessAdmin         @relation(fields: [businessId], references: [id])
  apiId        String
  api          ApiIntegrationCatalog @relation(fields: [apiId], references: [id], name: "ApiCatalogRelation")
  externalId   String
  publicApiKey String                @unique
  status       ApiIntegrationStatus  @default(INACTIVE)
  botId        String?
  bot          BusinessBot?          @relation(fields: [botId], references: [id])
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  subApis BusinessSubApi[] @relation("SubApisFromChat")

  @@unique([businessId, apiId])
}

model BusinessSubApi {
  id         String                 @id @default(cuid())
  apiChatId  String
  apiChat    BusinessApiIntegration @relation("SubApisFromChat", fields: [apiChatId], references: [id])
  apiId      String
  api        ApiIntegrationCatalog  @relation(fields: [apiId], references: [id])
  externalId String
  status     ApiIntegrationStatus   @default(INACTIVE)
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  @@unique([apiChatId, apiId])
}

model ApiIntegrationCatalog {
  id        String          @id @default(cuid())
  name      String
  baseUrl   String
  type      EnvironmentType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  apiIntegrations BusinessApiIntegration[] @relation(name: "ApiCatalogRelation")
  subApis         BusinessSubApi[]

  @@unique([name, type])
}

enum EnvironmentType {
  DEV
  PROD
}

model BusinessWhatsappConfig {
  id                    String        @id @default(cuid())
  name                  String
  businessId            String
  business              BusinessAdmin @relation(fields: [businessId], references: [id])
  wabaId                String
  phoneNumberId         String
  senderPhoneNumber     String
  accessToken           String
  environment           WSEnvironment
  testDestinationNumber String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  bots                  BusinessBot[]
}

enum VariableType {
  STRING
  NUMBER
  BOOLEAN
  ENUM
  DATE
}

model Vertical {
  id         String   @id @default(cuid())
  name       String
  slug       String   @unique
  label      String
  variables  VerticalVariable[]
  businesses BusinessAdmin[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model VerticalVariable {
  id         String       @id @default(cuid())
  verticalId String
  vertical   Vertical     @relation(fields: [verticalId], references: [id])

  name       String
  slug       String
  label      String

  type       VariableType
  required   Boolean      @default(false)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  businessActiveVariables BusinessActiveVariable[]

  @@unique([verticalId, slug])
}

model BusinessActiveVariable {
  id                 String           @id @default(cuid())
  businessId         String
  business           BusinessAdmin    @relation(fields: [businessId], references: [id])
  verticalVariableId String
  verticalVariable   VerticalVariable @relation(fields: [verticalVariableId], references: [id])
  apiFieldName       String
  isFilterable       Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@unique([businessId, verticalVariableId])
}

model BusinessBot {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  simulatedPhone       String?
  webhookURL           String
  webhookTestURL       String?
  whatsappWebhookToken String?
  whatsappWebhookPath  String?

  businessId           String
  business             BusinessAdmin          @relation(fields: [businessId], references: [id])
  whatsappConfigId     String
  whatsappConfig       BusinessWhatsappConfig @relation(fields: [whatsappConfigId], references: [id])
  apiIntegrations      BusinessApiIntegration[]

  activeEventTypes     BusinessBotEventType[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebhookEventType {
  id             String   @id @default(cuid())
  type           String
  label          String
  webhookURL     String?
  webhookTestURL String?
  active         Boolean  @default(false)
  createdAt      DateTime @default(now())

  bots           BusinessBotEventType[]
}

model BusinessBotEventType {
  id          String           @id @default(cuid())
  bot         BusinessBot      @relation(fields: [botId], references: [id])
  botId       String
  eventType   WebhookEventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId String
  createdAt   DateTime         @default(now())

  @@unique([botId, eventTypeId])
}
