generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model User {
  id             String   @id @default(cuid())
  user_name      String   @unique
  email          String?  @unique
  phone          String?
  password       String
  changePassword Boolean  @default(true)
  roleId         String
  role           Role     @relation(fields: [roleId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum BusinessStatus {
  ACTIVE // Cliente con servicio funcionando
  PENDING // En prueba, demo o esperando activación
  INACTIVE // Ya no se usa, pero no ha sido eliminado
  BLOCKED // Suspendido manualmente por problemas
  SUSPENDED // Suspendido por impago u otro automático
}

enum ApiName {
  LEADS
  CHATS
}

enum ApiIntegrationStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum WSEnvironment {
  DEV
  TEST
  PROD
}

model Business {
  id              String                   @id @default(cuid())
  name            String
  slug            String                   @unique
  status          BusinessStatus           @default(PENDING)
  apiKeyPrivate   String                   @unique
  webhookToken    String?
  webhookURL      String?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  whatsappConfig  BusinessWhatsappConfig?
  apiIntegrations BusinessApiIntegration[] // <-- CAMPO RELACIÓN INVERSA AÑADIDO
}

model BusinessApiIntegration {
  id         String   @id @default(cuid())
  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  apiName      ApiName
  externalId   String
  publicApiKey String               @unique
  status       ApiIntegrationStatus @default(ACTIVE)

  whatsappConfigId String? // <-- si quieres opcional
  whatsappConfig   BusinessWhatsappConfig? @relation(fields: [whatsappConfigId], references: [id]) // RELACIÓN INVERSA

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([businessId, apiName])
}

model BusinessWhatsappConfig {
  id                    String                   @id @default(cuid())
  businessId            String                   @unique
  business              Business                 @relation(fields: [businessId], references: [id])
  wabaId                String
  phoneNumberId         String
  senderPhoneNumber     String
  accessToken           String
  environment           WSEnvironment
  testDestinationNumber String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  integrations          BusinessApiIntegration[] // <-- RELACIÓN INVERSA MANTENIDA
}
